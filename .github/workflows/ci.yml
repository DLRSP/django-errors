name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '24 18 * * 2'

jobs:
  test-django:
    name: py${{ matrix.python-version }} dj-${{ matrix.django-version }} cm-${{ matrix.use-custom-model }} wt-${{ matrix.run-web-tests }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
        django-version:
          - "2.2"
          - "3.2"
        use-custom-model:
          - true
          - false
        run-web-tests:
          - true
          - false
        exclude:
          - run-web-tests: true
            python-version: "3.6"
          - run-web-tests: true
            python-version: "3.7"
          - run-web-tests: true
            python-version: "3.8"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install codecov flake8 django_nose pytest
          grep -v "^django==" requirements.txt > /tmp/reqs.txt
          pip install -r /tmp/reqs.txt
          pip install "django~=${{ matrix.django-version }}.0" -U
          git clone --depth=50 --branch=django-errors https://github.com/DLRSP/example.git DLRSP/example
          python setup.py install
#      - name: Test
#        env:
#          USE_CUSTOM_MODEL: ${{ matrix.use-custom-model }}
#          RUN_WEB_TESTS: ${{ matrix.run-web-tests }}
#          BROWSER_TAG:  chrome-latest
#        run: |
#          ./scripts/ci_runtests.sh
#      - name: Test with pytest
#        run: |
#          pytest
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    needs: test-django
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [test-django, analyze]
    steps:
      - uses: actions/checkout@v2
      - name: Coverage
        run: |
          python -m flake8 --ignore=E501 DLRSP/example
          coverage run DLRSP/example/manage.py test --exe --all-modules
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
#          name: ${{ matrix.python-version }}-${{ matrix.django-version }}

  deploy:
    name: PyPI Deploy
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [test-django, analyze, coverage]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
      - name: Build a binary wheel, egg  and a source tarball
        run: |
          python setup.py sdist bdist_wheel bdist_egg
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
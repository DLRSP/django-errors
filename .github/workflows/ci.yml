name: CI

on:
  push:
    branches: [ master ]
  pull_request:
  schedule:
    - cron: '24 18 * * 2'

jobs:
  test-django:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade codecov tox tox-py

      - name: Run tox targets for ${{ matrix.python-version }}
        run: tox --py current

      - name: Upload coverage
        run: |
          coverage combine
          codecov

#      - name: Test
#        env:
#          USE_CUSTOM_MODEL: ${{ matrix.use-custom-model }}
#          RUN_WEB_TESTS: ${{ matrix.run-web-tests }}
#          BROWSER_TAG:  chrome-latest
#        run: |
#          ./scripts/ci_runtests.sh
#      - name: Test with pytest
#        run: |
#          pytest

#      - name: Generate coverage report
#        run: |
#          pip install pytest pytest-cov
#          pytest --cov=./ --cov-report=xml

#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v2
#        with:
##          token: ${{ secrets.CODECOV_TOKEN }}
#          directory: ./coverage/reports/
#          env_vars: OS,PYTHON
#          fail_ci_if_error: true
#          files: ./coverage1.xml,./coverage2.xml
#          flags: unittests
#          name: codecov-umbrella
#          path_to_write_report: ./coverage/codecov_report.txt
#          verbose: true

#      - name: Coverage
#        run: |
#          python -m flake8 --ignore=E501 DLRSP/example
#          coverage run DLRSP/example/manage.py test --exe --all-modules
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          fail_ci_if_error: true
#          name: ${{ matrix.python-version }}-${{ matrix.django-version }}

  analyze:
    name: QL Analyze
    runs-on: ubuntu-latest
    needs: test-django
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Python Code Quality and Lint
      uses: ricardochaves/python-lint@v1.4.0
      with:
        python-root-list: "src/django_errors tests"

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: ammaraskar/sphinx-action@0.4
      with:
        docs-folder: "docs/"
#        pre-build-command: "apt-get update -y && apt-get install -y latexmk texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended"
#        build-command: "make latexpdf"
    - uses: actions/upload-artifact@v1
      with:
        name: DocumentationHTML
        path: docs/build/html/
#    - uses: actions/upload-artifact@v1
#      with:
#        name: DocumentationPDF
#        path: docs/build/pdf/

  deploy:
    name: PyPI Deploy
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [test-django, analyze]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
      - name: Build a binary wheel, egg  and a source tarball
        run: |
          python setup.py sdist bdist_wheel bdist_egg
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
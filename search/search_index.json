{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django-Errors is an app to wrap Django errors. Requirements Django-Errors requires the following: Python (3.6, 3.7, 3.8, 3.9, 3.10) Django (2.2, 3.2) We highly recommend and only officially support the latest patch release of each Python and Django series. Installation Install using pip , including any optional packages you want... pip install django-errors ...or clone the project from github. git clone https://github.com/DLRSP/django-errors/ Add 'django_errors' to your INSTALLED_APPS setting. settings.py INSTALLED_APPS = [ ... 'django_errors' , ] Add the following to your root urls.py file. urls.py # ...other imports... from django_errors import views as errors_views urlpatterns = [ # ...other urls... ] handler400 = errors_views . custom_400 \"\"\" Handle 400 error \"\"\" handler403 = errors_views . custom_403 \"\"\" Handle 403 error \"\"\" handler404 = errors_views . custom_404 \"\"\" Handle 404 error \"\"\" handler500 = errors_views . custom_500 \"\"\" Handle 500 error \"\"\" Example Let's take a look at a quick example of using django-errors to build a simple App with custom error pages. Browser the demo app on-line on Heroku Check the demo repo on GitHub Quickstart Can't wait to get started? The quickstart guide is the fastest way to get up and running and building Apps with django-errors . Development See the Contribution guidelines for information on how to clone the repository, run the test suite and contribute changes back to django-errors. Security If you believe you\u2019ve found something in django-errors which has security implications, please do not raise the issue in a public forum . Send a description of the issue via email to dlrsp.issue@gmail.com . The project maintainers will then work with you to resolve any issues where required, prior to any public disclosure. License MIT License Copyright (c) 2010-present DLRSP (https://dlrsp.org) and other contributors. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"#requirements","text":"Django-Errors requires the following: Python (3.6, 3.7, 3.8, 3.9, 3.10) Django (2.2, 3.2) We highly recommend and only officially support the latest patch release of each Python and Django series.","title":"Requirements"},{"location":"#installation","text":"Install using pip , including any optional packages you want... pip install django-errors ...or clone the project from github. git clone https://github.com/DLRSP/django-errors/ Add 'django_errors' to your INSTALLED_APPS setting. settings.py INSTALLED_APPS = [ ... 'django_errors' , ] Add the following to your root urls.py file. urls.py # ...other imports... from django_errors import views as errors_views urlpatterns = [ # ...other urls... ] handler400 = errors_views . custom_400 \"\"\" Handle 400 error \"\"\" handler403 = errors_views . custom_403 \"\"\" Handle 403 error \"\"\" handler404 = errors_views . custom_404 \"\"\" Handle 404 error \"\"\" handler500 = errors_views . custom_500 \"\"\" Handle 500 error \"\"\"","title":"Installation"},{"location":"#example","text":"Let's take a look at a quick example of using django-errors to build a simple App with custom error pages. Browser the demo app on-line on Heroku Check the demo repo on GitHub","title":"Example"},{"location":"#quickstart","text":"Can't wait to get started? The quickstart guide is the fastest way to get up and running and building Apps with django-errors .","title":"Quickstart"},{"location":"#development","text":"See the Contribution guidelines for information on how to clone the repository, run the test suite and contribute changes back to django-errors.","title":"Development"},{"location":"#security","text":"If you believe you\u2019ve found something in django-errors which has security implications, please do not raise the issue in a public forum . Send a description of the issue via email to dlrsp.issue@gmail.com . The project maintainers will then work with you to resolve any issues where required, prior to any public disclosure.","title":"Security"},{"location":"#license","text":"MIT License Copyright (c) 2010-present DLRSP (https://dlrsp.org) and other contributors. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"community/contributing/","text":"Contributing to REST framework The world can only really be changed one piece at a time. The art is picking that piece. \u2014 Tim Berners-Lee There are many ways you can contribute to Django REST framework. We'd like it to be a community-led project, so please get involved and help shape the future of the project. Community The most important thing you can do to help push the REST framework project forward is to be actively involved wherever possible. Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case. If you use REST framework, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about using REST framework, or publishing a tutorial about building a project with a particular JavaScript framework. Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of REST framework are more difficult to understand and work with. Other really great ways you can help move the community forward include helping to answer questions on the discussion group , or setting up an email alert on StackOverflow so that you get notified of any new questions with the django-rest-framework tag. When answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant. Code of conduct Please keep the tone polite & professional. For some users a discussion on the REST framework mailing list or ticket tracker may be their first engagement with the open source community. First impressions count, so let's try to make everyone feel welcome. Be mindful in the language you choose. As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive. It's just as easy, and more inclusive to use gender neutral language in those situations. The Django code of conduct gives a fuller set of guidelines for participating in community forums. Issues It's really helpful if you can make sure to address issues on the correct channel. Usage questions should be directed to the discussion group . Feature requests, bug reports and other issues should be raised on the GitHub issue tracker . Some tips on good issue reporting: When describing issues try to phrase your ticket in terms of the behavior you think needs changing rather than the code you think need changing. Search the issue list first for related items, and make sure you're running the latest version of REST framework before reporting an issue. If reporting a bug, then try to include a pull request with a failing test case. This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one. Feature requests will often be closed with a recommendation that they be implemented outside of the core REST framework library. Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead of REST framework, so that the focus can be on continued stability, bugfixes, and great documentation. Closing an issue doesn't necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened. Triaging issues Getting involved in triaging incoming issues is a good way to start contributing. Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be. Anyone can help out with this, you just need to be willing to Read through the ticket - does it make sense, is it missing any context that would help explain it better? Is the ticket reported in the correct place, would it be better suited as a discussion on the discussion group? If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request? If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package? If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again. Development To start developing on Django REST framework, first create a Fork from the Django REST Framework repo on GitHub. Then clone your fork. The clone command will look like this, with your GitHub username instead of YOUR-USERNAME: git clone https://github.com/YOUR-USERNAME/django-rest-framework See GitHub's Fork a Repo Guide for more help. Changes should broadly follow the PEP 8 style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles. You can check your contributions against these conventions each time you commit using the pre-commit hooks, which we also run on CI. To set them up, first ensure you have the pre-commit tool installed, for example: python -m pip install pre-commit Then run: pre-commit install Testing To run the tests, clone the repository, and then: # Setup the virtual environment python3 -m venv env source env/bin/activate pip install django pip install -r requirements.txt # Run the tests ./runtests.py Test options Run using a more concise output style. ./runtests.py -q Run the tests for a given test case. ./runtests.py MyTestCase Run the tests for a given test method. ./runtests.py MyTestCase.test_this_method Shorter form to run the tests for a given test method. ./runtests.py test_this_method Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given command line input. Running against multiple environments You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run: tox Pull requests It's a good idea to make pull requests early on. A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission. It's also always best to make a new branch before starting work on a pull request. This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests. It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests. GitHub's documentation for working on pull requests is available here . Always run the tests before submitting pull requests, and ideally run tox in order to check that your modifications are compatible on all supported versions of Python and Django. Once you've made a pull request take a look at the build status in the GitHub interface and make sure the tests are running as you'd expect. Above: build notifications Managing compatibility issues Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into the compat.py module, and should provide a single common interface that the rest of the codebase can use. Documentation The documentation for REST framework is built from the Markdown source files in the docs directory . There are many great Markdown editors that make working with the documentation really easy. The Mou editor for Mac is one such editor that comes highly recommended. Building the documentation To build the documentation, install MkDocs with pip install mkdocs and then run the following command. mkdocs build This will build the documentation into the site directory. You can build the documentation and open a preview in a browser window by using the serve command. mkdocs serve Language style Documentation should be in American English. The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible. Some other tips: Keep paragraphs reasonably short. Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'. Markdown style There are a couple of conventions you should follow when working on the documentation. 1. Headers Headers should use the hash style. For example: ### Some important topic The underline style should not be used. Don't do this: Some important topic ==================== 2. Links Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [some other thing][other-thing]. More text... [other-thing]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are hyperlinking to another REST framework document, you should use a relative link, and link to the .md suffix. For example: [authentication]: ../api-guide/authentication.md Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document. When the documentation is built, these links will be converted into regular links to HTML pages. 3. Notes If you want to draw attention to a note or warning, use a pair of enclosing lines, like so: --- **Note:** A useful documentation note. ---","title":"Contributing"},{"location":"community/contributing/#contributing-to-rest-framework","text":"The world can only really be changed one piece at a time. The art is picking that piece. \u2014 Tim Berners-Lee There are many ways you can contribute to Django REST framework. We'd like it to be a community-led project, so please get involved and help shape the future of the project.","title":"Contributing to REST framework"},{"location":"community/contributing/#community","text":"The most important thing you can do to help push the REST framework project forward is to be actively involved wherever possible. Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case. If you use REST framework, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about using REST framework, or publishing a tutorial about building a project with a particular JavaScript framework. Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of REST framework are more difficult to understand and work with. Other really great ways you can help move the community forward include helping to answer questions on the discussion group , or setting up an email alert on StackOverflow so that you get notified of any new questions with the django-rest-framework tag. When answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant.","title":"Community"},{"location":"community/contributing/#code-of-conduct","text":"Please keep the tone polite & professional. For some users a discussion on the REST framework mailing list or ticket tracker may be their first engagement with the open source community. First impressions count, so let's try to make everyone feel welcome. Be mindful in the language you choose. As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive. It's just as easy, and more inclusive to use gender neutral language in those situations. The Django code of conduct gives a fuller set of guidelines for participating in community forums.","title":"Code of conduct"},{"location":"community/contributing/#issues","text":"It's really helpful if you can make sure to address issues on the correct channel. Usage questions should be directed to the discussion group . Feature requests, bug reports and other issues should be raised on the GitHub issue tracker . Some tips on good issue reporting: When describing issues try to phrase your ticket in terms of the behavior you think needs changing rather than the code you think need changing. Search the issue list first for related items, and make sure you're running the latest version of REST framework before reporting an issue. If reporting a bug, then try to include a pull request with a failing test case. This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one. Feature requests will often be closed with a recommendation that they be implemented outside of the core REST framework library. Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead of REST framework, so that the focus can be on continued stability, bugfixes, and great documentation. Closing an issue doesn't necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened.","title":"Issues"},{"location":"community/contributing/#triaging-issues","text":"Getting involved in triaging incoming issues is a good way to start contributing. Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be. Anyone can help out with this, you just need to be willing to Read through the ticket - does it make sense, is it missing any context that would help explain it better? Is the ticket reported in the correct place, would it be better suited as a discussion on the discussion group? If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request? If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package? If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again.","title":"Triaging issues"},{"location":"community/contributing/#development","text":"To start developing on Django REST framework, first create a Fork from the Django REST Framework repo on GitHub. Then clone your fork. The clone command will look like this, with your GitHub username instead of YOUR-USERNAME: git clone https://github.com/YOUR-USERNAME/django-rest-framework See GitHub's Fork a Repo Guide for more help. Changes should broadly follow the PEP 8 style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles. You can check your contributions against these conventions each time you commit using the pre-commit hooks, which we also run on CI. To set them up, first ensure you have the pre-commit tool installed, for example: python -m pip install pre-commit Then run: pre-commit install","title":"Development"},{"location":"community/contributing/#testing","text":"To run the tests, clone the repository, and then: # Setup the virtual environment python3 -m venv env source env/bin/activate pip install django pip install -r requirements.txt # Run the tests ./runtests.py","title":"Testing"},{"location":"community/contributing/#test-options","text":"Run using a more concise output style. ./runtests.py -q Run the tests for a given test case. ./runtests.py MyTestCase Run the tests for a given test method. ./runtests.py MyTestCase.test_this_method Shorter form to run the tests for a given test method. ./runtests.py test_this_method Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given command line input.","title":"Test options"},{"location":"community/contributing/#running-against-multiple-environments","text":"You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run: tox","title":"Running against multiple environments"},{"location":"community/contributing/#pull-requests","text":"It's a good idea to make pull requests early on. A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission. It's also always best to make a new branch before starting work on a pull request. This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests. It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests. GitHub's documentation for working on pull requests is available here . Always run the tests before submitting pull requests, and ideally run tox in order to check that your modifications are compatible on all supported versions of Python and Django. Once you've made a pull request take a look at the build status in the GitHub interface and make sure the tests are running as you'd expect. Above: build notifications","title":"Pull requests"},{"location":"community/contributing/#managing-compatibility-issues","text":"Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into the compat.py module, and should provide a single common interface that the rest of the codebase can use.","title":"Managing compatibility issues"},{"location":"community/contributing/#documentation","text":"The documentation for REST framework is built from the Markdown source files in the docs directory . There are many great Markdown editors that make working with the documentation really easy. The Mou editor for Mac is one such editor that comes highly recommended.","title":"Documentation"},{"location":"community/contributing/#building-the-documentation","text":"To build the documentation, install MkDocs with pip install mkdocs and then run the following command. mkdocs build This will build the documentation into the site directory. You can build the documentation and open a preview in a browser window by using the serve command. mkdocs serve","title":"Building the documentation"},{"location":"community/contributing/#language-style","text":"Documentation should be in American English. The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible. Some other tips: Keep paragraphs reasonably short. Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'.","title":"Language style"},{"location":"community/contributing/#markdown-style","text":"There are a couple of conventions you should follow when working on the documentation.","title":"Markdown style"},{"location":"community/contributing/#1-headers","text":"Headers should use the hash style. For example: ### Some important topic The underline style should not be used. Don't do this: Some important topic ====================","title":"1. Headers"},{"location":"community/contributing/#2-links","text":"Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [some other thing][other-thing]. More text... [other-thing]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are hyperlinking to another REST framework document, you should use a relative link, and link to the .md suffix. For example: [authentication]: ../api-guide/authentication.md Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document. When the documentation is built, these links will be converted into regular links to HTML pages.","title":"2. Links"},{"location":"community/contributing/#3-notes","text":"If you want to draw attention to a note or warning, use a pair of enclosing lines, like so: --- **Note:** A useful documentation note. ---","title":"3. Notes"},{"location":"community/third-party-packages/","text":"Third Party Packages Software ecosystems [\u2026] establish a community that further accelerates the sharing of knowledge, content, issues, expertise and skills. \u2014 Jan Bosch . About Third Party Packages Third Party Packages allow developers to share code that extends the functionality of Django REST framework, in order to support additional use-cases. We support , encourage and strongly favor the creation of Third Party Packages to encapsulate new behavior rather than adding additional functionality directly to Django REST Framework. We aim to make creating third party packages as easy as possible, whilst keeping a simple and well maintained core API. By promoting third party packages we ensure that the responsibility for a package remains with its author. If a package proves suitably popular it can always be considered for inclusion into the core REST framework. If you have an idea for a new feature please consider how it may be packaged as a Third Party Package. We're always happy to discuss ideas on the Mailing List . Creating a Third Party Package Version compatibility Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into a compat.py module, and should provide a single common interface that the rest of the codebase can use. Check out Django REST framework's compat.py for an example. Once your package is available Once your package is decently documented and available on PyPI, you might want share it with others that might find it useful. Adding to the Django REST framework grid We suggest adding your package to the REST Framework grid on Django Packages. Adding to the Django REST framework docs Create a Pull Request or Issue on GitHub, and we'll add a link to it from the main REST framework documentation. You can add your package under Third party packages of the API Guide section that best applies, like Authentication or Permissions . You can also link your package under the Third Party Packages section. Announce on the discussion group. You can also let others know about your package through the discussion group . Existing Third Party Packages Django REST Framework has a growing community of developers, packages, and resources. Check out a grid detailing all the packages and ecosystem around Django REST Framework at Django Packages . To submit new content, open an issue or create a pull request . Authentication djangorestframework-digestauth - Provides Digest Access Authentication support. django-oauth-toolkit - Provides OAuth 2.0 support. djangorestframework-simplejwt - Provides JSON Web Token Authentication support. hawkrest - Provides Hawk HTTP Authorization. djangorestframework-httpsignature - Provides an easy to use HTTP Signature Authentication mechanism. djoser - Provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation. dj-rest-auth - Provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc. drf-oidc-auth - Implements OpenID Connect token authentication for DRF. drfpasswordless - Adds (Medium, Square Cash inspired) passwordless logins and signups via email and mobile numbers. django-rest-authemail - Provides a RESTful API for user signup and authentication using email addresses. Permissions drf-any-permissions - Provides alternative permission handling. djangorestframework-composed-permissions - Provides a simple way to define complex permissions. rest_condition - Another extension for building complex permissions in a simple and convenient way. dry-rest-permissions - Provides a simple way to define permissions for individual api actions. drf-access-policy - Declarative and flexible permissions inspired by AWS' IAM policies. drf-psq - An extension that gives support for having action-based permission_classes , serializer_class , and queryset dependent on permission-based rules. Serializers django-rest-framework-mongoengine - Serializer class that supports using MongoDB as the storage layer for Django REST framework. djangorestframework-gis - Geographic add-ons djangorestframework-hstore - Serializer class to support django-hstore DictionaryField model field and its schema-mode feature. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. html-json-forms - Provides an algorithm and serializer to process HTML JSON Form submissions per the (inactive) spec. django-rest-framework-serializer-extensions - Enables black/whitelisting fields, and conditionally expanding child serializers on a per-view/request basis. djangorestframework-queryfields - Serializer mixin allowing clients to control which fields will be sent in the API response. drf-flex-fields - Serializer providing dynamic field expansion and sparse field sets via URL parameters. drf-action-serializer - Serializer providing per-action fields config for use with ViewSets to prevent having to write multiple serializers. djangorestframework-dataclasses - Serializer providing automatic field generation for Python dataclasses, like the built-in ModelSerializer does for models. django-restql - Turn your REST API into a GraphQL like API(It allows clients to control which fields will be sent in a response, uses GraphQL like syntax, supports read and write on both flat and nested fields). graphwrap - Transform your REST API into a fully compliant GraphQL API with just two lines of code. Leverages Graphene-Django to dynamically build, at runtime, a GraphQL ObjectType for each view in your API. Serializer fields drf-compound-fields - Provides \"compound\" serializer fields, such as lists of simple values. drf-extra-fields - Provides extra serializer fields. django-versatileimagefield - Provides a drop-in replacement for Django's stock ImageField that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here . Views django-rest-multiple-models - Provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request. drf-typed-views - Use Python type annotations to validate/deserialize request parameters. Inspired by API Star, Hug and FastAPI. rest-framework-actions - Provides control over each action in ViewSets. Serializers per action, method. Routers drf-nested-routers - Provides routers and relationship fields for working with nested resources. wq.db.rest - Provides an admin-style model registration API with reasonable default URLs and viewsets. Parsers djangorestframework-msgpack - Provides MessagePack renderer and parser support. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. djangorestframework-camel-case - Provides camel case JSON renderers and parsers. nested-multipart-parser - Provides nested parser for http multipart request Renderers djangorestframework-csv - Provides CSV renderer support. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. drf_ujson2 - Implements JSON rendering using the UJSON package. rest-pandas - Pandas DataFrame-powered renderers including Excel, CSV, and SVG formats. djangorestframework-rapidjson - Provides rapidjson support with parser and renderer. Filtering djangorestframework-chain - Allows arbitrary chaining of both relations and lookup filters. django-url-filter - Allows a safe way to filter data via human-friendly URLs. It is a generic library which is not tied to DRF but it provides easy integration with DRF. drf-url-filter is a simple Django app to apply filters on drf ModelViewSet 's Queryset in a clean, simple and configurable way. It also supports validations on incoming query params and their values. django-rest-framework-guardian - Provides integration with django-guardian, including the DjangoObjectPermissionsFilter previously found in DRF. Misc cookiecutter-django-rest - A cookiecutter template that takes care of the setup and configuration so you can focus on making your REST apis awesome. djangorestrelationalhyperlink - A hyperlinked serializer that can can be used to alter relationships via hyperlinks, but otherwise like a hyperlink model serializer. django-rest-framework-proxy - Proxy to redirect incoming request to another API server. gaiarestframework - Utils for django-rest-framework drf-extensions - A collection of custom extensions ember-django-adapter - An adapter for working with Ember.js django-versatileimagefield - Provides a drop-in replacement for Django's stock ImageField that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here . drf-tracking - Utilities to track requests to DRF API views. drf_tweaks - Serializers with one-step validation (and more), pagination without counts and other tweaks. django-rest-framework-braces - Collection of utilities for working with Django Rest Framework. The most notable ones are FormSerializer and SerializerForm , which are adapters between DRF serializers and Django forms. drf-haystack - Haystack search for Django Rest Framework django-rest-framework-version-transforms - Enables the use of delta transformations for versioning of DRF resource representations. django-rest-messaging , django-rest-messaging-centrifugo and django-rest-messaging-js - A real-time pluggable messaging service using DRM. djangorest-alchemy - SQLAlchemy support for REST framework. djangorestframework-datatables - Seamless integration between Django REST framework and Datatables . django-rest-framework-condition - Decorators for managing HTTP cache headers for Django REST framework (ETag and Last-modified). django-rest-witchcraft - Provides DRF integration with SQLAlchemy with SQLAlchemy model serializers/viewsets and a bunch of other goodies djangorestframework-mvt - An extension for creating views that serve Postgres data as Map Box Vector Tiles. drf-viewset-profiler - Lib to profile all methods from a viewset line by line. djangorestframework-features - Advanced schema generation and more based on named features. django-elasticsearch-dsl-drf - Integrate Elasticsearch DSL with Django REST framework. Package provides views, serializers, filter backends, pagination and other handy add-ons. django-api-client - DRF client that groups the Endpoint response, for use in CBVs and FBV as if you were working with Django's Native Models.. fast-drf - A model based library for making API development faster and easier.","title":"Third-Party-Packages"},{"location":"community/third-party-packages/#third-party-packages","text":"Software ecosystems [\u2026] establish a community that further accelerates the sharing of knowledge, content, issues, expertise and skills. \u2014 Jan Bosch .","title":"Third Party Packages"},{"location":"community/third-party-packages/#about-third-party-packages","text":"Third Party Packages allow developers to share code that extends the functionality of Django REST framework, in order to support additional use-cases. We support , encourage and strongly favor the creation of Third Party Packages to encapsulate new behavior rather than adding additional functionality directly to Django REST Framework. We aim to make creating third party packages as easy as possible, whilst keeping a simple and well maintained core API. By promoting third party packages we ensure that the responsibility for a package remains with its author. If a package proves suitably popular it can always be considered for inclusion into the core REST framework. If you have an idea for a new feature please consider how it may be packaged as a Third Party Package. We're always happy to discuss ideas on the Mailing List .","title":"About Third Party Packages"},{"location":"community/third-party-packages/#creating-a-third-party-package","text":"","title":"Creating a Third Party Package"},{"location":"community/third-party-packages/#version-compatibility","text":"Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into a compat.py module, and should provide a single common interface that the rest of the codebase can use. Check out Django REST framework's compat.py for an example.","title":"Version compatibility"},{"location":"community/third-party-packages/#once-your-package-is-available","text":"Once your package is decently documented and available on PyPI, you might want share it with others that might find it useful.","title":"Once your package is available"},{"location":"community/third-party-packages/#adding-to-the-django-rest-framework-grid","text":"We suggest adding your package to the REST Framework grid on Django Packages.","title":"Adding to the Django REST framework grid"},{"location":"community/third-party-packages/#adding-to-the-django-rest-framework-docs","text":"Create a Pull Request or Issue on GitHub, and we'll add a link to it from the main REST framework documentation. You can add your package under Third party packages of the API Guide section that best applies, like Authentication or Permissions . You can also link your package under the Third Party Packages section.","title":"Adding to the Django REST framework docs"},{"location":"community/third-party-packages/#announce-on-the-discussion-group","text":"You can also let others know about your package through the discussion group .","title":"Announce on the discussion group."},{"location":"community/third-party-packages/#existing-third-party-packages","text":"Django REST Framework has a growing community of developers, packages, and resources. Check out a grid detailing all the packages and ecosystem around Django REST Framework at Django Packages . To submit new content, open an issue or create a pull request .","title":"Existing Third Party Packages"},{"location":"community/third-party-packages/#authentication","text":"djangorestframework-digestauth - Provides Digest Access Authentication support. django-oauth-toolkit - Provides OAuth 2.0 support. djangorestframework-simplejwt - Provides JSON Web Token Authentication support. hawkrest - Provides Hawk HTTP Authorization. djangorestframework-httpsignature - Provides an easy to use HTTP Signature Authentication mechanism. djoser - Provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation. dj-rest-auth - Provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc. drf-oidc-auth - Implements OpenID Connect token authentication for DRF. drfpasswordless - Adds (Medium, Square Cash inspired) passwordless logins and signups via email and mobile numbers. django-rest-authemail - Provides a RESTful API for user signup and authentication using email addresses.","title":"Authentication"},{"location":"community/third-party-packages/#permissions","text":"drf-any-permissions - Provides alternative permission handling. djangorestframework-composed-permissions - Provides a simple way to define complex permissions. rest_condition - Another extension for building complex permissions in a simple and convenient way. dry-rest-permissions - Provides a simple way to define permissions for individual api actions. drf-access-policy - Declarative and flexible permissions inspired by AWS' IAM policies. drf-psq - An extension that gives support for having action-based permission_classes , serializer_class , and queryset dependent on permission-based rules.","title":"Permissions"},{"location":"community/third-party-packages/#serializers","text":"django-rest-framework-mongoengine - Serializer class that supports using MongoDB as the storage layer for Django REST framework. djangorestframework-gis - Geographic add-ons djangorestframework-hstore - Serializer class to support django-hstore DictionaryField model field and its schema-mode feature. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. html-json-forms - Provides an algorithm and serializer to process HTML JSON Form submissions per the (inactive) spec. django-rest-framework-serializer-extensions - Enables black/whitelisting fields, and conditionally expanding child serializers on a per-view/request basis. djangorestframework-queryfields - Serializer mixin allowing clients to control which fields will be sent in the API response. drf-flex-fields - Serializer providing dynamic field expansion and sparse field sets via URL parameters. drf-action-serializer - Serializer providing per-action fields config for use with ViewSets to prevent having to write multiple serializers. djangorestframework-dataclasses - Serializer providing automatic field generation for Python dataclasses, like the built-in ModelSerializer does for models. django-restql - Turn your REST API into a GraphQL like API(It allows clients to control which fields will be sent in a response, uses GraphQL like syntax, supports read and write on both flat and nested fields). graphwrap - Transform your REST API into a fully compliant GraphQL API with just two lines of code. Leverages Graphene-Django to dynamically build, at runtime, a GraphQL ObjectType for each view in your API.","title":"Serializers"},{"location":"community/third-party-packages/#serializer-fields","text":"drf-compound-fields - Provides \"compound\" serializer fields, such as lists of simple values. drf-extra-fields - Provides extra serializer fields. django-versatileimagefield - Provides a drop-in replacement for Django's stock ImageField that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here .","title":"Serializer fields"},{"location":"community/third-party-packages/#views","text":"django-rest-multiple-models - Provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request. drf-typed-views - Use Python type annotations to validate/deserialize request parameters. Inspired by API Star, Hug and FastAPI. rest-framework-actions - Provides control over each action in ViewSets. Serializers per action, method.","title":"Views"},{"location":"community/third-party-packages/#routers","text":"drf-nested-routers - Provides routers and relationship fields for working with nested resources. wq.db.rest - Provides an admin-style model registration API with reasonable default URLs and viewsets.","title":"Routers"},{"location":"community/third-party-packages/#parsers","text":"djangorestframework-msgpack - Provides MessagePack renderer and parser support. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. djangorestframework-camel-case - Provides camel case JSON renderers and parsers. nested-multipart-parser - Provides nested parser for http multipart request","title":"Parsers"},{"location":"community/third-party-packages/#renderers","text":"djangorestframework-csv - Provides CSV renderer support. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. drf_ujson2 - Implements JSON rendering using the UJSON package. rest-pandas - Pandas DataFrame-powered renderers including Excel, CSV, and SVG formats. djangorestframework-rapidjson - Provides rapidjson support with parser and renderer.","title":"Renderers"},{"location":"community/third-party-packages/#filtering","text":"djangorestframework-chain - Allows arbitrary chaining of both relations and lookup filters. django-url-filter - Allows a safe way to filter data via human-friendly URLs. It is a generic library which is not tied to DRF but it provides easy integration with DRF. drf-url-filter is a simple Django app to apply filters on drf ModelViewSet 's Queryset in a clean, simple and configurable way. It also supports validations on incoming query params and their values. django-rest-framework-guardian - Provides integration with django-guardian, including the DjangoObjectPermissionsFilter previously found in DRF.","title":"Filtering"},{"location":"community/third-party-packages/#misc","text":"cookiecutter-django-rest - A cookiecutter template that takes care of the setup and configuration so you can focus on making your REST apis awesome. djangorestrelationalhyperlink - A hyperlinked serializer that can can be used to alter relationships via hyperlinks, but otherwise like a hyperlink model serializer. django-rest-framework-proxy - Proxy to redirect incoming request to another API server. gaiarestframework - Utils for django-rest-framework drf-extensions - A collection of custom extensions ember-django-adapter - An adapter for working with Ember.js django-versatileimagefield - Provides a drop-in replacement for Django's stock ImageField that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here . drf-tracking - Utilities to track requests to DRF API views. drf_tweaks - Serializers with one-step validation (and more), pagination without counts and other tweaks. django-rest-framework-braces - Collection of utilities for working with Django Rest Framework. The most notable ones are FormSerializer and SerializerForm , which are adapters between DRF serializers and Django forms. drf-haystack - Haystack search for Django Rest Framework django-rest-framework-version-transforms - Enables the use of delta transformations for versioning of DRF resource representations. django-rest-messaging , django-rest-messaging-centrifugo and django-rest-messaging-js - A real-time pluggable messaging service using DRM. djangorest-alchemy - SQLAlchemy support for REST framework. djangorestframework-datatables - Seamless integration between Django REST framework and Datatables . django-rest-framework-condition - Decorators for managing HTTP cache headers for Django REST framework (ETag and Last-modified). django-rest-witchcraft - Provides DRF integration with SQLAlchemy with SQLAlchemy model serializers/viewsets and a bunch of other goodies djangorestframework-mvt - An extension for creating views that serve Postgres data as Map Box Vector Tiles. drf-viewset-profiler - Lib to profile all methods from a viewset line by line. djangorestframework-features - Advanced schema generation and more based on named features. django-elasticsearch-dsl-drf - Integrate Elasticsearch DSL with Django REST framework. Package provides views, serializers, filter backends, pagination and other handy add-ons. django-api-client - DRF client that groups the Endpoint response, for use in CBVs and FBV as if you were working with Django's Native Models.. fast-drf - A model based library for making API development faster and easier.","title":"Misc"},{"location":"tutorial/quickstart/","text":"Quickstart We're going to create a simple App to allow admin users wrap django errors. Example Project setup Clone the new Django project named example # Clone the example's project repository git clone --depth = 50 --branch = django-errors https://github.com/DLRSP/example.git example-errors cd example-errors # Create a virtual environment to isolate our package dependencies locally python -m venv env source env/bin/activate # On Windows use `env\\Scripts\\activate` # Install Django and django-errors into the virtual environment pip install -r requirements.txt # Now sync your database for the first time python manage.py migrate # Run the local server python manage.py runserver","title":"Quickstart"},{"location":"tutorial/quickstart/#quickstart","text":"We're going to create a simple App to allow admin users wrap django errors.","title":"Quickstart"},{"location":"tutorial/quickstart/#example-project-setup","text":"Clone the new Django project named example # Clone the example's project repository git clone --depth = 50 --branch = django-errors https://github.com/DLRSP/example.git example-errors cd example-errors # Create a virtual environment to isolate our package dependencies locally python -m venv env source env/bin/activate # On Windows use `env\\Scripts\\activate` # Install Django and django-errors into the virtual environment pip install -r requirements.txt # Now sync your database for the first time python manage.py migrate # Run the local server python manage.py runserver","title":"Example Project setup"}]}
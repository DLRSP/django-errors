{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"It's an app to wrap Django errors. Requirements These packages are required: Python (3.6, 3.7, 3.8, 3.9, 3.10) Django (2.2, 3.2) We highly recommend and only officially support the latest patch release of each Python and Django series. Installation Install using pip , including any optional packages you want... pip install django-errors ...or clone the project from github. git clone https://github.com/DLRSP/django-errors/ Add 'django_errors' to your INSTALLED_APPS setting. settings.py INSTALLED_APPS = [ ... 'django_errors' , ] Add the following to your root urls.py file. urls.py # ...other imports... from django_errors import views as errors_views urlpatterns = [ # ...other urls... ] handler400 = errors_views . custom_400 \"\"\" Handle 400 error \"\"\" handler403 = errors_views . custom_403 \"\"\" Handle 403 error \"\"\" handler404 = errors_views . custom_404 \"\"\" Handle 404 error \"\"\" handler500 = errors_views . custom_500 \"\"\" Handle 500 error \"\"\" If you would like to handle also the \"405 - Method not allowed\", add the following middleware to your INSTALLED_APPS setting. settings.py MIDDLEWARE = [ ... \"django_errors.middleware.handler.HttpResponseNotAllowedMiddleware\" , ... ] If you would like to receive email message for \"404 - Not Found\" error, add the following middleware at top to your INSTALLED_APPS setting. settings.py MIDDLEWARE = [ \"django.middleware.common.BrokenLinkEmailsMiddleware\" , # <-- Error Manager 404 ... ] Example Let's take a look at a quick example of using this project to build a simple App with custom error pages . Browser the demo app on-line on Heroku Check the demo repo on GitHub Quickstart Can't wait to get started? The quickstart guide is the fastest way to get up and running and building a demo App . Customize Do you want custom solutions? The customize section is an overview of which part are easy to design. If you find how to personalize different scenarios or behaviors, a pull request is welcome! Development See the Contribution guidelines for information on how to clone the repository, run the test suite and contribute changes back to django-errors. Security If you believe you\u2019ve found something in this project which has security implications, please do not raise the issue in a public forum . Send a description of the issue via email to dlrsp.issue@gmail.com . The project maintainers will then work with you to resolve any issues where required, prior to any public disclosure. License MIT License Copyright (c) 2010-present DLRSP (https://dlrsp.org) and other contributors. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"#requirements","text":"These packages are required: Python (3.6, 3.7, 3.8, 3.9, 3.10) Django (2.2, 3.2) We highly recommend and only officially support the latest patch release of each Python and Django series.","title":"Requirements"},{"location":"#installation","text":"Install using pip , including any optional packages you want... pip install django-errors ...or clone the project from github. git clone https://github.com/DLRSP/django-errors/ Add 'django_errors' to your INSTALLED_APPS setting. settings.py INSTALLED_APPS = [ ... 'django_errors' , ] Add the following to your root urls.py file. urls.py # ...other imports... from django_errors import views as errors_views urlpatterns = [ # ...other urls... ] handler400 = errors_views . custom_400 \"\"\" Handle 400 error \"\"\" handler403 = errors_views . custom_403 \"\"\" Handle 403 error \"\"\" handler404 = errors_views . custom_404 \"\"\" Handle 404 error \"\"\" handler500 = errors_views . custom_500 \"\"\" Handle 500 error \"\"\" If you would like to handle also the \"405 - Method not allowed\", add the following middleware to your INSTALLED_APPS setting. settings.py MIDDLEWARE = [ ... \"django_errors.middleware.handler.HttpResponseNotAllowedMiddleware\" , ... ] If you would like to receive email message for \"404 - Not Found\" error, add the following middleware at top to your INSTALLED_APPS setting. settings.py MIDDLEWARE = [ \"django.middleware.common.BrokenLinkEmailsMiddleware\" , # <-- Error Manager 404 ... ]","title":"Installation"},{"location":"#example","text":"Let's take a look at a quick example of using this project to build a simple App with custom error pages . Browser the demo app on-line on Heroku Check the demo repo on GitHub","title":"Example"},{"location":"#quickstart","text":"Can't wait to get started? The quickstart guide is the fastest way to get up and running and building a demo App .","title":"Quickstart"},{"location":"#customize","text":"Do you want custom solutions? The customize section is an overview of which part are easy to design. If you find how to personalize different scenarios or behaviors, a pull request is welcome!","title":"Customize"},{"location":"#development","text":"See the Contribution guidelines for information on how to clone the repository, run the test suite and contribute changes back to django-errors.","title":"Development"},{"location":"#security","text":"If you believe you\u2019ve found something in this project which has security implications, please do not raise the issue in a public forum . Send a description of the issue via email to dlrsp.issue@gmail.com . The project maintainers will then work with you to resolve any issues where required, prior to any public disclosure.","title":"Security"},{"location":"#license","text":"MIT License Copyright (c) 2010-present DLRSP (https://dlrsp.org) and other contributors. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"community/contributing/","text":"Contributing The world can only really be changed one piece at a time. The art is picking that piece. \u2014 Tim Berners-Lee Community The most important thing you can do to help push the project forward is to be actively involved wherever possible. Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case. If you use this app, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about, or publishing a tutorial about building a project with it. Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of application are more difficult to understand and work with. When answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant. Code of conduct Please keep the tone polite & professional. For some users a discussion on the mailing list or ticket tracker may be their first engagement with the open source community. First impressions count, so let's try to make everyone feel welcome. Be mindful in the language you choose. As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive. It's just as easy, and more inclusive to use gender neutral language in those situations. The Django code of conduct gives a fuller set of guidelines for participating in community forums. Issues It's really helpful if you can make sure to address issues on the correct channel. Usage questions should be directed to the discussion group . Feature requests, bug reports and other issues should be raised on the GitHub issue tracker . Some tips on good issue reporting: When describing issues try to phrase your ticket in terms of the behavior you think needs changing rather than the code you think need changing. Search the issue list first for related items, and make sure you're running the latest version before reporting an issue. If reporting a bug, then try to include a pull request with a failing test case. This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one. Feature requests will often be closed with a recommendation that they be implemented outside of the core library. Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead, so that the focus can be on continued stability, bugfixes, and great documentation. Closing an issue doesn't necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened. Triaging issues Getting involved in triaging incoming issues is a good way to start contributing. Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be. Anyone can help out with this, you just need to be willing to Read through the ticket - does it make sense, is it missing any context that would help explain it better? Is the ticket reported in the correct place, would it be better suited as a discussion on the discussion group? If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request? If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package? If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again. Development To start developing, first create a Fork from the django-errors repo on GitHub. Then clone your fork. The clone command will look like this, with your GitHub username instead of YOUR-USERNAME: git clone https://github.com/YOUR-USERNAME/django-errors See GitHub's Fork a Repo Guide for more help. Changes should broadly follow the PEP 8 style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles. You can check your contributions against these conventions each time you commit using the pre-commit hooks, which we also run on CI. To set them up, first ensure you have the pre-commit tool installed, for example: python -m pip install pre-commit Then run: pre-commit install Translation To run the translation, clone the repository, and then: django-admin makemessages -l it Modify the .po file for your locale, and then: django-admin compilemessages -l it Contribute with your translation, test it in your local example and then push the commit as \"Pull request\" Testing To run the tests, clone the repository, and then: # Setup the virtual environment python -m venv env source env/bin/activate pip install django pip install -r requirements/requirements.in # Run the tests python runtests.py Test options Run using a more concise output style. python runtests.py -q Run the tests for a given test case. python runtests.py MyTestCase Run the tests for a given test method. python runtests.py MyTestCase.test_this_method Shorter form to run the tests for a given test method. python runtests.py test_this_method Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given command line input. Running against multiple environments You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run: tox Pull requests It's a good idea to make pull requests early on. A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission. It's also always best to make a new branch before starting work on a pull request. This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests. It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests. GitHub's documentation for working on pull requests is available here . Always run the tests before submitting pull requests, and ideally run tox in order to check that your modifications are compatible on all supported versions of Python and Django. Once you've made a pull request take a look at the build status in the GitHub interface and make sure the tests are running as you'd expect. Above: build notifications Managing compatibility issues Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into the compat.py module, and should provide a single common interface that the rest of the codebase can use. Documentation The documentation is built from the Markdown source files in the docs directory . There are many great Markdown editors that make working with the documentation really easy. The Mou editor for Mac is one such editor that comes highly recommended. Building the documentation To build the documentation, install MkDocs with pip install mkdocs and then run the following command. mkdocs build This will build the documentation into the site directory. You can build the documentation and open a preview in a browser window by using the serve command. mkdocs serve Language style Documentation should be in English. The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible. Some other tips: Keep paragraphs reasonably short. Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'. Markdown style There are a couple of conventions you should follow when working on the documentation. 1. Headers Headers should use the hash style. For example: ### Some important topic The underline style should not be used. Don't do this: Some important topic ==================== 2. Links Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [some other thing][other-thing]. More text... [other-thing]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are hyperlinking to another document, you should use a relative link, and link to the .md suffix. For example: [authentication]: ../api-guide/authentication.md Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document. When the documentation is built, these links will be converted into regular links to HTML pages. 3. Notes If you want to draw attention to a note or warning, use a pair of enclosing lines, like so: --- **Note:** A useful documentation note. ---","title":"Contributing"},{"location":"community/contributing/#contributing","text":"The world can only really be changed one piece at a time. The art is picking that piece. \u2014 Tim Berners-Lee","title":"Contributing"},{"location":"community/contributing/#community","text":"The most important thing you can do to help push the project forward is to be actively involved wherever possible. Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case. If you use this app, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about, or publishing a tutorial about building a project with it. Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of application are more difficult to understand and work with. When answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant.","title":"Community"},{"location":"community/contributing/#code-of-conduct","text":"Please keep the tone polite & professional. For some users a discussion on the mailing list or ticket tracker may be their first engagement with the open source community. First impressions count, so let's try to make everyone feel welcome. Be mindful in the language you choose. As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive. It's just as easy, and more inclusive to use gender neutral language in those situations. The Django code of conduct gives a fuller set of guidelines for participating in community forums.","title":"Code of conduct"},{"location":"community/contributing/#issues","text":"It's really helpful if you can make sure to address issues on the correct channel. Usage questions should be directed to the discussion group . Feature requests, bug reports and other issues should be raised on the GitHub issue tracker . Some tips on good issue reporting: When describing issues try to phrase your ticket in terms of the behavior you think needs changing rather than the code you think need changing. Search the issue list first for related items, and make sure you're running the latest version before reporting an issue. If reporting a bug, then try to include a pull request with a failing test case. This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one. Feature requests will often be closed with a recommendation that they be implemented outside of the core library. Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead, so that the focus can be on continued stability, bugfixes, and great documentation. Closing an issue doesn't necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened.","title":"Issues"},{"location":"community/contributing/#triaging-issues","text":"Getting involved in triaging incoming issues is a good way to start contributing. Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be. Anyone can help out with this, you just need to be willing to Read through the ticket - does it make sense, is it missing any context that would help explain it better? Is the ticket reported in the correct place, would it be better suited as a discussion on the discussion group? If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request? If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package? If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again.","title":"Triaging issues"},{"location":"community/contributing/#development","text":"To start developing, first create a Fork from the django-errors repo on GitHub. Then clone your fork. The clone command will look like this, with your GitHub username instead of YOUR-USERNAME: git clone https://github.com/YOUR-USERNAME/django-errors See GitHub's Fork a Repo Guide for more help. Changes should broadly follow the PEP 8 style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles. You can check your contributions against these conventions each time you commit using the pre-commit hooks, which we also run on CI. To set them up, first ensure you have the pre-commit tool installed, for example: python -m pip install pre-commit Then run: pre-commit install","title":"Development"},{"location":"community/contributing/#translation","text":"To run the translation, clone the repository, and then: django-admin makemessages -l it Modify the .po file for your locale, and then: django-admin compilemessages -l it Contribute with your translation, test it in your local example and then push the commit as \"Pull request\"","title":"Translation"},{"location":"community/contributing/#testing","text":"To run the tests, clone the repository, and then: # Setup the virtual environment python -m venv env source env/bin/activate pip install django pip install -r requirements/requirements.in # Run the tests python runtests.py","title":"Testing"},{"location":"community/contributing/#test-options","text":"Run using a more concise output style. python runtests.py -q Run the tests for a given test case. python runtests.py MyTestCase Run the tests for a given test method. python runtests.py MyTestCase.test_this_method Shorter form to run the tests for a given test method. python runtests.py test_this_method Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given command line input.","title":"Test options"},{"location":"community/contributing/#running-against-multiple-environments","text":"You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run: tox","title":"Running against multiple environments"},{"location":"community/contributing/#pull-requests","text":"It's a good idea to make pull requests early on. A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission. It's also always best to make a new branch before starting work on a pull request. This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests. It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests. GitHub's documentation for working on pull requests is available here . Always run the tests before submitting pull requests, and ideally run tox in order to check that your modifications are compatible on all supported versions of Python and Django. Once you've made a pull request take a look at the build status in the GitHub interface and make sure the tests are running as you'd expect. Above: build notifications","title":"Pull requests"},{"location":"community/contributing/#managing-compatibility-issues","text":"Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into the compat.py module, and should provide a single common interface that the rest of the codebase can use.","title":"Managing compatibility issues"},{"location":"community/contributing/#documentation","text":"The documentation is built from the Markdown source files in the docs directory . There are many great Markdown editors that make working with the documentation really easy. The Mou editor for Mac is one such editor that comes highly recommended.","title":"Documentation"},{"location":"community/contributing/#building-the-documentation","text":"To build the documentation, install MkDocs with pip install mkdocs and then run the following command. mkdocs build This will build the documentation into the site directory. You can build the documentation and open a preview in a browser window by using the serve command. mkdocs serve","title":"Building the documentation"},{"location":"community/contributing/#language-style","text":"Documentation should be in English. The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible. Some other tips: Keep paragraphs reasonably short. Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'.","title":"Language style"},{"location":"community/contributing/#markdown-style","text":"There are a couple of conventions you should follow when working on the documentation.","title":"Markdown style"},{"location":"community/contributing/#1-headers","text":"Headers should use the hash style. For example: ### Some important topic The underline style should not be used. Don't do this: Some important topic ====================","title":"1. Headers"},{"location":"community/contributing/#2-links","text":"Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [some other thing][other-thing]. More text... [other-thing]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are hyperlinking to another document, you should use a relative link, and link to the .md suffix. For example: [authentication]: ../api-guide/authentication.md Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document. When the documentation is built, these links will be converted into regular links to HTML pages.","title":"2. Links"},{"location":"community/contributing/#3-notes","text":"If you want to draw attention to a note or warning, use a pair of enclosing lines, like so: --- **Note:** A useful documentation note. ---","title":"3. Notes"},{"location":"community/references/","text":"References Errors Topic the-secret-of-a-successful-error-page applying-defensive-design-for-the-web why-django-doesnt-have-error-page-handler-for-405 everything-you-need-to-know-about-middleware comprehensive-guide-to-django-middleware Errors example 404 py4u.net","title":"References"},{"location":"community/references/#references","text":"","title":"References"},{"location":"community/references/#errors-topic","text":"the-secret-of-a-successful-error-page applying-defensive-design-for-the-web why-django-doesnt-have-error-page-handler-for-405 everything-you-need-to-know-about-middleware comprehensive-guide-to-django-middleware","title":"Errors Topic"},{"location":"community/references/#errors-example","text":"","title":"Errors example"},{"location":"community/references/#404","text":"py4u.net","title":"404"},{"location":"tutorial/customize/","text":"Customize Try to customize different behaviours or aspect of app. HTML templates Error page's with images Javascript Alert Google Tag Manager","title":"Customize"},{"location":"tutorial/customize/#customize","text":"Try to customize different behaviours or aspect of app. HTML templates Error page's with images Javascript Alert Google Tag Manager","title":"Customize"},{"location":"tutorial/images/","text":"Images If you like to add an image for your error's page, the suggested way is implementing your custom simple_tag . Suppose to have your model MyBackground to store all your site background's image with a filer field called image . example/models.py from django.db import models from filer.fields.image import FilerImageField class MyBackground ( models . Model ): name = models . CharField ( verbose_name = \"Background\" , max_length = 50 , null = True ) image = FilerImageField ( null = True , blank = True , on_delete = models . CASCADE ) Upload your images with name like the error's code of the page to be able to dynamically load different images with same html file. Create your own template tags to store the image inside the context view where you want to load image example/templatetags/errors.py from django import template from django.core.cache import cache from example.models import MyBackground register = template . Library () @register . simple_tag ( takes_context = True ) def load_error_img ( context ): cache_key = f \"site_error_ { context [ 'error_code' ] } _context\" try : context_cache = cache . get ( cache_key ) except Exception as err : context_cache = None if context_cache is None : try : custom_context = MyBackground . objects . values ( 'image__file' ) . filter ( name = context [ 'error_code' ]) . first () context_cache = cache . set ( cache_key , custom_context [ \"image__file\" ], timeout = 86400 ) return custom_context [ \"image__file\" ] except Exception as err : print ( err ) return context_cache or \"\" Create your own html template inside the root of your app. Assign the result of your tag load_error_img into variable error_img and use it with static filter. example/template/errors.html {% extends 'base.html' %} {% load static errors %} {% block content %} {% load_error_img as error_img %} < div style = \"background-image: url( {% static error_img %} );\" > < strong > Oops! </ strong > {{ error_message }} </ div > {% endblock content %} (optional) It could be useful use the MEDIA_URL setting inside template. To do it, add the settings.py TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [ os . path . join ( PROJECT_DIR , 'templates' )], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , 'django.template.context_processors.media' , ], }, }, ] ``` html title=\"example/template/errors.html\" hl_lines=\"2\" ... <div style=\"background-image: url( {{ MEDIA_URL }}{% static error_img %} );\"> <strong>Oops! </strong> {{ error_message }} </div> ... ```","title":"Images"},{"location":"tutorial/images/#images","text":"If you like to add an image for your error's page, the suggested way is implementing your custom simple_tag . Suppose to have your model MyBackground to store all your site background's image with a filer field called image . example/models.py from django.db import models from filer.fields.image import FilerImageField class MyBackground ( models . Model ): name = models . CharField ( verbose_name = \"Background\" , max_length = 50 , null = True ) image = FilerImageField ( null = True , blank = True , on_delete = models . CASCADE ) Upload your images with name like the error's code of the page to be able to dynamically load different images with same html file. Create your own template tags to store the image inside the context view where you want to load image example/templatetags/errors.py from django import template from django.core.cache import cache from example.models import MyBackground register = template . Library () @register . simple_tag ( takes_context = True ) def load_error_img ( context ): cache_key = f \"site_error_ { context [ 'error_code' ] } _context\" try : context_cache = cache . get ( cache_key ) except Exception as err : context_cache = None if context_cache is None : try : custom_context = MyBackground . objects . values ( 'image__file' ) . filter ( name = context [ 'error_code' ]) . first () context_cache = cache . set ( cache_key , custom_context [ \"image__file\" ], timeout = 86400 ) return custom_context [ \"image__file\" ] except Exception as err : print ( err ) return context_cache or \"\" Create your own html template inside the root of your app. Assign the result of your tag load_error_img into variable error_img and use it with static filter. example/template/errors.html {% extends 'base.html' %} {% load static errors %} {% block content %} {% load_error_img as error_img %} < div style = \"background-image: url( {% static error_img %} );\" > < strong > Oops! </ strong > {{ error_message }} </ div > {% endblock content %} (optional) It could be useful use the MEDIA_URL setting inside template. To do it, add the settings.py TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [ os . path . join ( PROJECT_DIR , 'templates' )], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , 'django.template.context_processors.media' , ], }, }, ] ``` html title=\"example/template/errors.html\" hl_lines=\"2\" ... <div style=\"background-image: url( {{ MEDIA_URL }}{% static error_img %} );\"> <strong>Oops! </strong> {{ error_message }} </div> ... ```","title":"Images"},{"location":"tutorial/quickstart/","text":"Quickstart Create a simple App to allow admin users wrap Django errors. Example Project setup Clone the Django project named example # Clone the example's project repository git clone --depth = 50 --branch = django-errors https://github.com/DLRSP/example.git example-errors cd example-errors # Create a virtual environment to isolate our package dependencies locally python -m venv env source env/bin/activate # On Windows use `env\\Scripts\\activate` # Install Django and django-errors into the virtual environment pip install -r requirements/py38-django32.txt # Now sync your database for the first time python manage.py migrate # Run the local server python manage.py runserver","title":"Quickstart"},{"location":"tutorial/quickstart/#quickstart","text":"Create a simple App to allow admin users wrap Django errors.","title":"Quickstart"},{"location":"tutorial/quickstart/#example-project-setup","text":"Clone the Django project named example # Clone the example's project repository git clone --depth = 50 --branch = django-errors https://github.com/DLRSP/example.git example-errors cd example-errors # Create a virtual environment to isolate our package dependencies locally python -m venv env source env/bin/activate # On Windows use `env\\Scripts\\activate` # Install Django and django-errors into the virtual environment pip install -r requirements/py38-django32.txt # Now sync your database for the first time python manage.py migrate # Run the local server python manage.py runserver","title":"Example Project setup"},{"location":"tutorial/templates/","text":"Templates You can overwrite each page's template by create your own html file inside example/templates/errors/404.html You can also overwrite one or all page's template by settings your own html file inside settings settings.py # Custom Templates for all errors page inside the root's templates of my app TEMPLATE_ERROR_ALL = \"general_errors_page.html\" # Custom Templates for only 404 error's inside the root's templates of my app TEMPLATE_ERROR_404 = \"other_error_page.html\" # Custom Templates for only 405 error's inside the custom_app's templates TEMPLATE_ERROR_405 = \"custom_app/another_error_page.html\" All available settings variables are: settings.py TEMPLATE_ERROR_ALL = \"errors/errors.html\" TEMPLATE_ERROR_400 = \"errors/400.html\" TEMPLATE_ERROR_403 = \"errors/403.html\" TEMPLATE_ERROR_404 = \"errors/404.html\" TEMPLATE_ERROR_405 = \"errors/405.html\" TEMPLATE_ERROR_500 = \"errors/500.html\" The order to find template is: Custom template for specific error page (example: settings.TEMPLATE_ERROR_404 ) Custom template for all errors page (example: settings.TEMPLATE_ERROR_ALL ) Custom template for specific error page by to overwrite default (example: example/templates/errors/404.html ) Default template for specific error page","title":"Templates"},{"location":"tutorial/templates/#templates","text":"You can overwrite each page's template by create your own html file inside example/templates/errors/404.html You can also overwrite one or all page's template by settings your own html file inside settings settings.py # Custom Templates for all errors page inside the root's templates of my app TEMPLATE_ERROR_ALL = \"general_errors_page.html\" # Custom Templates for only 404 error's inside the root's templates of my app TEMPLATE_ERROR_404 = \"other_error_page.html\" # Custom Templates for only 405 error's inside the custom_app's templates TEMPLATE_ERROR_405 = \"custom_app/another_error_page.html\" All available settings variables are: settings.py TEMPLATE_ERROR_ALL = \"errors/errors.html\" TEMPLATE_ERROR_400 = \"errors/400.html\" TEMPLATE_ERROR_403 = \"errors/403.html\" TEMPLATE_ERROR_404 = \"errors/404.html\" TEMPLATE_ERROR_405 = \"errors/405.html\" TEMPLATE_ERROR_500 = \"errors/500.html\" The order to find template is: Custom template for specific error page (example: settings.TEMPLATE_ERROR_404 ) Custom template for all errors page (example: settings.TEMPLATE_ERROR_ALL ) Custom template for specific error page by to overwrite default (example: example/templates/errors/404.html ) Default template for specific error page","title":"Templates"}]}